# -*- coding: utf-8 -*-
"""Cópia de BigQuery - running queries

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LtHANo-sHH6rNkH5PfkGUKyy4dk5Klbd

# BigQuery - running queries


Autores: 

Tersa Romão: up201603999

Nuno Nunes: up201606441 

Vasco Soares: up201604364

**Google Cloud Project**: bdcc-project-201603999

## Get access to Google Cloud from the notebook
"""

from google.colab import drive
drive.mount('/content/drive')

"""### Set project id"""

PROJECT_ID='bdcc-project-201603999' #@param {type: "string"}

"""### Authenticate"""

from google.colab import auth
auth.authenticate_user()
#!gcloud config set project {PROJECT_ID}

"""### /**image_search_multiple**

Na query "image search multiple" são feitas junções das tabelas Classes e Labels usando o Label como elemento em comum, foi também usado o UNNEST para podermos criar um array com elesmentos a ter em conta no where. No select usamos o ARRAY_AGG de forma a conseguirmos obter um conjunto de elementos.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project $PROJECT_ID
# 
# 
# SELECT image.ImageId, ARRAY_AGG(classes.Description) as classes 
# FROM `bdcc22project.openimages.classes` as classes 
# JOIN `bdcc22project.openimages.image_labels` as image USING(Label), UNNEST(["Dog", "Cat"]) as animals 
# WHERE classes.description like animals 
# GROUP BY 1 order by array_length(classes) desc limit 10
#

"""### /**relations**

Na query "relations" são feitas junções de tres tabelas (classes,relations,tester) usando como elemento comum as labels mas tendo em conta a sua associação com cada tabela.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project $PROJECT_ID
#         
# SELECT relations.Relation, COUNT(*) AS NumImages
#         FROM `bdcc22project.openimages.classes` as classes
#         JOIN `bdcc22project.openimages.relations` as relations ON relations.label1 = classes.label
#         LEFT JOIN `bdcc22project.openimages.classes` as tester ON tester.Label = relations.Label2
#         GROUP BY Relation
#         ORDER BY Relation 
# 
# 
#

"""### /**relations_search**

Na query "relations search" são feitas junções de tres tabelas (classes,relations,tester) como na query anterior e usando como elemento comum as labels mas tendo em conta a sua associação com cada tabela.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project $PROJECT_ID
# SELECT relations.ImageId, classes.Description, relations.Relation, tester.Description
#                 FROM `bdcc22project.openimages.classes` as classes
#                 JOIN `bdcc22project.openimages.relations` as relations ON relations.label1 = classes.label
#                 LEFT JOIN `bdcc22project.openimages.classes` as tester ON tester.Label = relations.Label2
#                 WHERE relations.Relation LIKE 'plays' 
#                 and classes.Description LIKE 'Girl' 
#                 and tester.Description LIKE 'Violin'  
#                 order by 1
#                 limit 10

"""### /**image_info**

Na query "Image Info" são feitas as junçoes de duas tabelas (classes e labels)
usando label como referência.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project $PROJECT_ID
# SELECT Description
#         FROM `bdcc22project.openimages.classes`
#         JOIN `bdcc22project.openimages.image_labels` USING(Label)
#         WHERE ImageId = '0041c772f8b9aef6' 
#         ORDER BY Description

!sudo apt-get install texlive-xetex texlive-fonts-recommended texlive-plain-generic
!jupyter nbconvert --to pdf /content/KNN.ipynb